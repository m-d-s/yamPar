PARSER_BEGIN(Parser)

public class Parser {
  public static void main(String[] args) {
     new Parser(System.in);
     try {
       Top();
       System.out.println("Valid syntax");
     } catch (ParseException e) {
       System.out.println("Invalid syntax at ("
                          + token.beginColumn + ","
                          + token.beginLine + "), "
                          + token.image);
     } catch (TokenMgrError e) {
       System.out.println(e.getMessage());
     }
  }
}
PARSER_END(Parser)

//- Parser Functions --------------------------------------------------

void Top(): { } {
  Stmt() <EOF>
}

void Stmt(): { } {
   (("print" | "return")? Expr())? ";"
  | Block() 
}

void Block(): { } {
  "{" (Stmt())* "}"
}

void Type(): { } {
  "int" | "bool"
}

 
void Expr(): { } {
  LOOKAHEAD(2)
  <IDENT> "=" Expr() 
  | LogOr() (<LOR> Expr() )?
}

void LogOr(): { } {
  Comp() ( <LAND> LogOr()  )?
}

void Comp(): { } {
  AddSub() ( 
    ( <LT>   AddSub()      )
   |( <LTEQ> AddSub()      )
   |( <GT>   AddSub()      )
   |( <GTEQ> AddSub()      )
   |( <NEQ>  AddSub()      )
   |( <EQEQ> AddSub()      )
  )?
}

void AddSub(): { } {
  MulDiv() (
	     ( <ADD> MulDiv() AddSubP()      ) 
	    |( <SUB> MulDiv() AddSubP()      ) 
	   )*
     
}

void MulDiv(): { } {
  Atom()  (
            ( <MUL> Atom() MulDivP() )
           |( <DIV> Atom() MulDivP() )
          )*
}

void Atom(): { } {
  ( 
    ( <OPEN> Expr() <CLOSE> )
   |( <INTLIT>              )
   |( <IDENT>               )
  )
}


//- Lexical Rules -----------------------------------------------------

//Whitespace and comments
SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

//Integer literal
TOKEN : {
  <INTLIT:     (<DIGIT>)+>
| <#DIGIT:     ["0"-"9"] >
}

//Identifier
TOKEN : {
  <IDENT:      <BEGIN> ( <LETTER> | <DIGIT> )*>
| <#BEGIN:       ["A"-"Z","a"-"z"]            >
| <#LETTER:      <BEGIN> | ["_"]              >
}

//Parentheses
TOKEN : {
  <OPEN:        "(" >
| <CLOSE:       ")" >
}

//Comparitor Operaters
TOKEN : {
  <LT:          "<" >
| <LTEQ:        "<=">
| <GT:          ">" >
| <GTEQ:        ">=">
| <NEQ:         "!=">
| <EQEQ:        "==">
}

//Logical Operaters
TOKEN : {
  <LAND:        "&&">
| <LOR:         "||">
}

//Arithmetic Operaters
TOKEN : {
  <ADD:         "+" >
| <SUB:         "-" >
| <MUL:         "*" >
| <DIV:         "/" >
}
