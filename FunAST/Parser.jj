//options { DEBUG_PARSER = true; } 
PARSER_BEGIN(Parser)
import ast.*;
public class Parser {
  public static void main(String[] args) {
     new Parser(System.in);
     try {
       Defn[] program = Top();
       new IndentOutput(System.out).indent(program);
     } catch (ParseException e) {
       System.out.println("Invalid syntax at ("
                          + token.beginColumn + ","
                          + token.beginLine + "), "
                          + token.image);
     } catch (TokenMgrError e) {
       System.out.println(e.getMessage());
     }
  }
}
PARSER_END(Parser)

//- Parser Functions --------------------------------------------------

Defn[] Top(): { Defn[] program; } {
  program=Program(0) <EOF>
  { return program; }
}

Defn[] Program(int soFar): { Defn d; Defn[] program; } {
  ( d=Defn() program=Program(soFar+1)
    { program[soFar] = d; return program; }
  | { return new Defn[soFar]; })
}

Defn Defn(): { Defn d; } {
  ( LOOKAHEAD(3)
    d=Global()
   |d=Fun()
  )
  { return d; }
}
 
Defn Global(): { Type t; VarIntro[] v; } {
  t=Type() v=Intros(0) ";"
  { return new Globals(t, v); }

}

Defn Fun(): { Type y = null; Token t; Formal[] f; Stmt s;} {
  ( "void" | y=Type() ) t=<IDENT> <OPEN> f=Formals(0) <CLOSE> s=Block()
  { return new Function(y, t.image ,f ,s); }
}

Formal[] Formals(int soFar): { Type y; Token t; Formal[] f; } {
  y=Type() t=<IDENT> ("," f=Formals(soFar+1) 
    { f[soFar] = new Formal(y, t.image); return f; })?
    {f = new Formal[soFar+1]; f[soFar] = new Formal(y, t.image); return f; }
  | { return new Formal[0]; }
}

StmtExpr FunCall(): { Token t; Expr[] e; } {
  t=<IDENT> <OPEN> e=Exprs(0) <CLOSE>
  { return new Call(t.image,e); }  
}

Stmt Stmt(): { Stmt s; StmtExpr m; } {
   (  s= Print()      
   | s=Return()      
   | s=While()       
   | s=Block()       
   | s=If()          
   | s=Decl()
   | LOOKAHEAD(2) m = FunCall() ";" { return new ExprStmt(m); }
   | s=StdAln()      
   | s=Empty()
  )
  { return s; }
}

Stmt Print(): { Expr e; } {
  "print" e=Expr() ";"  
  { return new   Print(e); }
}

Stmt Return(): { Expr e = null; } {
  "return" ( e=Expr() )? ";"
  { return new  Return(e);  }
}

Stmt While(): { Expr e; Stmt s;} {
  "while" <OPEN>e=Expr()<CLOSE>  s=Stmt() 
  { return new While(e,s);  }
}

Stmt Block(): { Stmt[] stmts; } {
  "{" stmts=Stmts(0) "}"
  { return new Block(stmts); }
}

Stmt If(): { Stmt s, l = null; Expr e; } {
  "if"    <OPEN>e=Expr()<CLOSE>  s=Stmt() (LOOKAHEAD(1) "else" l=Stmt())?
  { return new  If(e,s,l);  } 

}

Stmt Empty(): { } {
  ";"					   
  { return new Empty(); }
}

Stmt[] Stmts(int soFar): { Stmt s; Stmt[] stmts; } {
  s=Stmt() stmts=Stmts(soFar+1)
    { stmts[soFar]=s; return stmts; }
  | { return new Stmt[soFar]; }
}

Stmt Decl(): { Type y; VarIntro[] intros; } {
  y=Type() intros = Intros(0) ";"
  { return new Locals(y,intros); } 
}

VarIntro Var(): { Token t; Expr e; } {
  t=<IDENT> ( "=" e=Expr() { return new InitVarIntro(t.image,e); })?
    { return new VarIntro(t.image); } 
}

VarIntro[] Intros(int soFar): { VarIntro[] intros; VarIntro v; } {
  v=Var() ("," intros = Intros(soFar+1) { intros[soFar] = v; return intros; })?
    { intros = new VarIntro[soFar+1]; intros[soFar] = v; return intros; } 
}

Type Type(): { } {
  ( "int"     { return Type.INT; }
  | "boolean" { return Type.BOOLEAN; })
}

Stmt StdAln(): { Expr e; Token t; } {
  t=<IDENT> "=" e=Expr() ";"  
  { return new ExprStmt(new Assign(t.image, e)); }
} 

Expr[] Exprs(int soFar): { Expr e; Expr [] exprs; } {
  e=Expr() ("," exprs = Exprs(soFar+1) { exprs[soFar] = e; return exprs; } )?
    { exprs = new Expr[soFar+1]; exprs[soFar] = e; return exprs; }
  | { return new Expr[0]; }
}

Expr Expr(): { Expr e; Token t; } {
  LOOKAHEAD(2)
  t =<IDENT> "=" e=Expr()   { return new Assign(t.image, e); }
  |e=LogOr()                { return e;        }
}

Expr LogOr(): { Expr e, p; } {
  e=LogAnd() ( <LOR> p =LogOr() { e = new LOr(e,p); } )?
    { return e; }
}
Expr LogAnd(): { Expr e, p; } {
  e=Comp() ( <LAND> p=LogAnd() { e = new LAnd(e,p); }   )?
    { return e; }
}

Expr Comp(): { Expr e, p; } {
  e=AddSub() ( 
    ( <LT>   p=AddSub() { e = new Lt(e,p);  }      )
   |( <LTEQ> p=AddSub() { e = new Lte(e,p); }      )
   |( <GT>   p=AddSub() { e = new Gt(e,p);  }      )
   |( <GTEQ> p=AddSub() { e = new Gte(e,p); }      )
   |( <NEQ>  p=AddSub() { e = new Neq(e,p); }      )
   |( <EQEQ> p=AddSub() { e = new Eql(e,p); }      )
  )?
    { return e; }
}

Expr AddSub(): { Expr e, p; } {
  e=MulDiv() ( 
	       ( <ADD> p = MulDiv() { e = new Add(e,p); } ) 
	      |( <SUB> p = MulDiv() { e = new Sub(e,p); } )
	     )*
    { return e; }
}

Expr MulDiv(): { Expr e, p; } {
  e=Atom() ( ( <MUL> p = Atom() { e = new Mul(e,p); } )
            |( <DIV> p = Atom() { e = new Div(e,p); } )
	   )*
    { return e; }
}

Expr Atom(): { Expr e; Token t; } {
  LOOKAHEAD(2) 
    e=FunCall()             { return e; }
  | t=<IDENT>               { return new Id(t.image);     }  
  | t=<INTLIT>              { return new IntLit(Integer.parseInt(t.image)); } 
  | <OPEN> e=Expr() <CLOSE> { return e;            } 
  
}


//- Lexical Rules -----------------------------------------------------

//Whitespace and comments
SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

//Integer literal
TOKEN : {
  <INTLIT:     (<DIGIT>)+>
| <#DIGIT:     ["0"-"9"] >
}

//Identifier
TOKEN : {
  <IDENT:      <BEGIN> ( <LETTER> | <DIGIT> )*>
| <#BEGIN:     ["A"-"Z","a"-"z"]            >
| <#LETTER:    <BEGIN> | ["_"]              >
}

//Parentheses
TOKEN : {
  <OPEN:       "(" >
| <CLOSE:      ")" >
}

//Comparitor Operaters
TOKEN : {
  <LT:         "<" >
| <LTEQ:       "<=">
| <GT:         ">" >
| <GTEQ:       ">=">
| <NEQ:        "!=">
| <EQEQ:       "==">
}

//Logical Operaters
TOKEN : {
  <LAND:       "&&">
| <LOR:        "||">
}

//Arithmetic Operaters
TOKEN : {
  <ADD:        "+" >
| <SUB:        "-" >
| <MUL:        "*" >
| <DIV:        "/" >
}
